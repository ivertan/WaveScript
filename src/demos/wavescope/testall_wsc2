#!/bin/bash

#================================================================================
# Invoking the script:

# [LAUNCHIT=...] ./testall_wsc2 [OPTIONS]

OPTIONS=$*

# Examples:
#OPTIONS=" -gc boehm "
#OPTIONS=" -gc none -threads "
#OPTIONS=" -gc none -threads "
#OPTIONS=" -gc refcount -threads "

## As a hack you can set LAUNCHIT=" " to skip valgrind:
if [ "$LAUNCHIT" = "" ]; then 
if [ "`which valgrind`" != "" ]; then
LAUNCHIT="valgrind --leak-check=full"
fi 
fi

#================================================================================
# Constants:

COMP=.__wsc2Messages.txt
RUN=.__runquery_output_wsc2.txt

echo > $COMP
echo > $RUN



function go () {
    echo; echo; echo; echo; echo; echo; echo;  
    echo "testall_wsc2: Running $1" 
    echo "============================================================" 
    echo wsc2 $OPTIONS $1 -exit-error; 
    if ! wsc2 $OPTIONS $1 -exit-error; 
    then echo wsc2 Returned error code!; exit 1; 
    fi
    echo >> $RUN
    echo $1 : >> $RUN
    #./query.exe | head -n 20 >> $RUN
    #(valgrind --leak-check=full ./query.exe -n 2 &> /dev/stdout) >> $RUN
    #./query.exe -n 2 &> /dev/stdout >> $RUN

    # Would like to add --error-exitcode=99 except that currently demo4b generates errors.
    # > /tmp/foobar_$1"
    echo Executing "($LAUNCHIT ./query.exe -n 2)"
    ($LAUNCHIT ./query.exe -n 2 &> /dev/stdout) > /tmp/foobar_$1
    RETVAL=$?    
    cat /tmp/foobar_$1 >> $RUN
    echo Query returned with val: $RETVAL
    if [ "$RETVAL" != "0" ]; then exit 1; fi
}


#================================================================================
# Main Script:


go "demo1c_timer.ws"
# go "demo1d_readFile_text.ws"
go "demo1e_readFile.ws" # no sigseg reading yet
###go "demo1f_readFile_sigseg.ws" 

go "demo2a_iterate.ws"
go "demo2b_iterateState.ws"
go "demo2c_inlining.ws"
# #go "demo2d_pullNtimer.ws" # goes forever
# #go "demo2e_passchain.ws"

go "demo3a_tuples.ws"
go "demo3c_lists.ws"
go "demo3d_tuples_of_tuples.ws"
go "demo3e_hashtables.ws"
go "demo3e2_morehashtables.ws"
go "demo3f_morelists.ws"
go "demo3g_arrays.ws" 

go "demo3h_advancedlists.ws"  

go "demo3i_conversion_prims.ws"

go "demo3j_numbers.ws"  

# go "demo3k_uniontype.ws"
# go "demo3l_moreunions.ws"
go "demo3m_sigsegs.ws"
go "demo3n_static_vals.ws"
go "demo3o_strings.ws"
go "demo3p_records.ws"

go "demo4a_fft.ws"
go "demo4b_morefft.ws"
go "demo4d_quoted_constants.ws"
go "demo4e_fifo_adt.ws"
go "demo4g_array_fifo.ws"


# # This one doesn't work for currently unknown reasons.
# # It produces ZEROs as output...
# #go "demo4m_fft_pipelined.ws"



# ## Doesn't work presently.  Probably has a problem with the array-filling code generated by the constants.
# #go "demo4c_quoted_constants.ws" 

fgo "demo5a_rewindow.ws"
go "demo5b_rewindow_inlined.ws"

go "demo6a_unionList.ws"
go "demo6b_sync.ws"
go "demo6c_syncN.ws" ## [2007.10.10] SEGFAULTS!
go "demo6e_stdlib_sync.ws"
go "demo6f_merge.ws"

go "demo7a_marmot_noinline.ws"
go "demo7b_marmot_phase1.ws"

go "demo8a_generic_arith.ws"
go "demo8b_sugars.ws"
go "demo8c_moresugar.ws"
go "demo8g_marshal.ws"

go "demo9_misc_prim_tests.ws"
go "demo9b_higher_order_prims.ws" 
go "demo9c_foreign.ws"
go "demo9d_foreign_pointer.ws"

go "demo9f_foreign_source.ws"

# Complex, because it produces two executables:
# First we run it in normal, non-split mode:
# go "demo9i_marshal.ws"
go "demo9i_simple_split.ws" 

echo "testall_wsc2: Running SPLIT test on demo9i"
echo "============================================================"
echo "testall_wsc2: Running SPLIT test on demo9i" >> $RUN
echo "============================================================" >> $RUN
# Then we split it:
# [2008.10.28] This doesn't presently work with threads because of the "spawning worker thread" messages.
# Even without that it still gets a double free error on the server side.
# 
# [2008.11.04] Right now we conservatively skip this if OPTIONS != ""
if [ "$OPTIONS" = "" ]; then
  if ! wsc2 $OPTIONS demo9i_simple_split.ws -split -exit-error
  then echo wsc2 Returned error code!; exit 1;  fi
       #$LAUNCHIT ./query_both.sh -n 2
       ./query_client.exe 2>> /dev/stdout | ($LAUNCHIT ./query_server.exe -n 2  2>> /dev/stdout) >> $RUN
       RETVAL=$?
       echo Query returned with val: $RETVAL
       if [ "$RETVAL" != "0" ]; then exit 1; fi
fi

go "demo10a_simple_merge.ws"
go "demo10b_repeated_rewindow.ws"

